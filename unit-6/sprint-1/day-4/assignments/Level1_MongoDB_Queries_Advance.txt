 1. Write a MongoDB query to display all the documents in the collection restaurants. 
 
 db.restaurants.find()
 db.restaurants.aggregate([])
 
 
 2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
 
 db.restaurants.find({},{restaurant_id : 1, name : 1, borough : 1, cuisine : 1})
 db.restaurants.aggregate([{$project : {restaurant_id : 1, name : 1, borough : 1, cuisine : 1}}])
 
 
 3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
 
 db.restaurants.find({},{_id : 0, restaurant_id : 1, name : 1, borough : 1, cuisine : 1})
 db.restaurants.aggregate([{$project : {_id : 0, restaurant_id : 1, name : 1, borough : 1, cuisine : 1}}])
   
  
 4. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
 
 db.restaurants.find({borough : "Bronx"})
 db.restaurants.aggregate([{$match : {borough : "Bronx"}}])
 
 
 5. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
 
 db.restaurants.find({borough : "Bronx"}).limit(5)
 db.restaurants.aggregate([{$match : {borough : "Bronx"}}, {$limit : 5}])
 
 
 6. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
 
 db.restaurants.find({borough : "Bronx"}).skip(5).limit(5)
 db.restaurants.aggregate([{$match : {borough : "Bronx"}},{$skip : 5},{$limit : 5}])
 
 
 7. Write a MongoDB query to find the restaurants who achieved a score more than 90.
 
 db.restaurants.find({'grades.score' : {$gt : 90}})
 db.restaurants.aggregate([{$match : {'grades.score' : {$gt : 90}}}])
 
 
 8. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
 
 db.restaurants.find({'grades.score' : {$gt : 80, $lt : 100}})
 db.restaurants.aggregate([{$match : {'grades.score' : {$gt : 80, $lt : 100}}}])
 
 
 9. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
 
 db.restaurants.find({'address.coord' : {$lt : -95.754168}})
 db.restaurants.aggregate([{$match : {'address.coord' : {$lt : -95.754168}}}])
 
 
 10. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
 
 db.restaurants.find({cuisine : {$ne : "American", $ne : "American "}, 'grades.score' : {$gt : 70}, 'address.coord' : {$lt : -65.754168}})
 db.restaurants.aggregate([{$match : {cuisine : {$ne : "American", $ne : "American "}, 'grades.score' : {$gt : 70}, 'address.coord' : {$lt : -65.754168}}}])
 db.restaurants.aggregate([{$match : {$and : [{cuisine : {$ne : "American"}},{cuisine : {$ne : "American "}}], 'grades.score' : {$gt : 70},'address.coord' : {$lt : -65.754168} }}]) 
 
 
 11. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
 
 db.restaurants.find({cuisine : {$ne : "American", $ne : "American "}, 'grades.score' : {$gt : 70}, 'address.coord' : {$lt : -65.754168}}) 
 db.restaurants.aggregate([{$match : {cuisine : {$ne : "American", $ne : "American "}, 'grades.score' : {$gt : 70}, 'address.coord' : {$lt : -65.754168}}}]) 
 


 12. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
 
 db.restaurants.find({name : {$regex : /^Wil/}}, {restaurant_id:1, name : 1, borough : 1, cuisine : 1})
 db.restaurants.aggregate([{$match : {name : {$regex : /^Wil/}}}, {$project : {restaurant_id:1, name : 1, borough : 1, cuisine : 1}}])
 
 
 13. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
 
 db.restaurants.find({name : {$regex : /ces$/}}, {restaurant_id:1, name : 1, borough : 1, cuisine : 1})
 db.restaurants.aggregate([{$match : {name : {$regex : /ces$/}}},{$project : {restaurant_id:1, name : 1, borough : 1, cuisine : 1}}])
 
 
 14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
 
 db.restaurants.find({name : {$regex : /Reg/}}, {restaurant_id:1, name : 1, borough : 1, cuisine : 1})
 db.restaurants.aggregate([{$match : {name : {$regex : /Reg/}}},{$project : {restaurant_id:1, name : 1, borough : 1, cuisine : 1}}])
 
 
 15. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
 
 db.restaurants.find().sort({name : 1})
 db.restaurants.aggregate([{$sort : {name : 1}}]) 
 
 
 16. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
 
 db.restaurants.find().sort({cuisine : 1, borough : -1})
 db.restaurants.aggregate([{$sort : {cuisine : 1, borough : -1}}]) 